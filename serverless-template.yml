
service: aws-python3 # NOTE: update this with your service name

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: false

provider:
  name: aws
  stage: dev
  runtime: python3.6
  profile: serverless-admin
  region: us-east-1
  timeout: 15
  environment:
    RINGCENTRAL_ENV: https://platform.ringcentral.com
    BOT_CLIENT_ID: replace-with-bot-client-ID
    BOT_CLIENT_SECRET: replace-with-bot-client-secret
    REDIRECT_HOST: replace-with-url-from-aws-gateway-api
    HELPER_CLIENT_ID: replace-with-helper-client-ID
    HELPER_CLIENT_SECRET: replace-with-helper-client-secret
    BOT_DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-botTable
    HELPER_DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-helperTable
    HELPER_BOT_ACCOUNT_RELATION: ${self:provider.environment.HELPER_DYNAMODB_TABLE}
    LEX_BOT_NAME: GlipBot


# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BOT_DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.HELPER_DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.HELPER_DYNAMODB_TABLE}/index/${self:provider.environment.HELPER_BOT_ACCOUNT_RELATION}"
    - Effect: Allow
      Action:
        - lex:PostText
      Resource: "arn:aws:lex:${opt:region, self:provider.region}:*:${self:provider.environment.LEX_BOT_NAME}:*"

functions:
  index:
    handler: index.handler
    events:
      - http:
          path: glip/{service}/{request_type}
          method: post
          cors: true
      - http:
          path: glip/{service}/{request_type}
          method: get
          cors: true

resources:
  Resources:
    BotDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.BOT_DYNAMODB_TABLE}
    
    HelperDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: owner_id
            AttributeType: S
          - AttributeName: bot_id
            AttributeType: S
        KeySchema:
          - AttributeName: owner_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.HELPER_DYNAMODB_TABLE}
            KeySchema:
              - AttributeName: bot_id
                KeyType: HASH
            Projection:
              NonKeyAttributes:
                - bot_id
              ProjectionType: INCLUDE
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.HELPER_DYNAMODB_TABLE}
